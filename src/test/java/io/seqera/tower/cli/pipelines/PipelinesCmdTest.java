/*
 * Copyright 2021-2023, Seqera.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.seqera.tower.cli.pipelines;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.seqera.tower.JSON;
import io.seqera.tower.cli.BaseCmdTest;
import io.seqera.tower.cli.commands.enums.OutputType;
import io.seqera.tower.cli.exceptions.InvalidResponseException;
import io.seqera.tower.cli.exceptions.MultiplePipelinesFoundException;
import io.seqera.tower.cli.exceptions.NoComputeEnvironmentException;
import io.seqera.tower.cli.exceptions.PipelineNotFoundException;
import io.seqera.tower.cli.exceptions.TowerException;
import io.seqera.tower.cli.exceptions.WorkspaceNotFoundException;
import io.seqera.tower.cli.responses.labels.ManageLabels;
import io.seqera.tower.cli.responses.pipelines.PipelinesAdded;
import io.seqera.tower.cli.responses.pipelines.PipelinesDeleted;
import io.seqera.tower.cli.responses.pipelines.PipelinesExport;
import io.seqera.tower.cli.responses.pipelines.PipelinesList;
import io.seqera.tower.cli.responses.pipelines.PipelinesUpdated;
import io.seqera.tower.cli.responses.pipelines.PipelinesView;
import io.seqera.tower.cli.utils.ModelHelper;
import io.seqera.tower.cli.utils.PaginationInfo;
import io.seqera.tower.model.ComputeEnvComputeConfig;
import io.seqera.tower.model.CreatePipelineRequest;
import io.seqera.tower.model.Launch;
import io.seqera.tower.model.PipelineDbDto;
import io.seqera.tower.model.WorkflowLaunchRequest;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import org.mockserver.client.MockServerClient;
import org.mockserver.model.JsonBody;
import org.mockserver.model.MediaType;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.List;

import static io.seqera.tower.cli.commands.AbstractApiCmd.USER_WORKSPACE_NAME;
import static io.seqera.tower.cli.commands.AbstractApiCmd.buildWorkspaceRef;
import static io.seqera.tower.cli.utils.JsonHelper.parseJson;
import static org.apache.commons.lang3.StringUtils.chop;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockserver.matchers.Times.exactly;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;
import static org.mockserver.model.JsonBody.json;

class PipelinesCmdTest extends BaseCmdTest {

    @Test
    void testUpdate(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep_one_minute\""), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipelines\":[{\"pipelineId\":217997727159863,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}],\"totalSize\":1}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/217997727159863/launch"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_update")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("PUT").withPath("/pipelines/217997727159863")
                        .withBody(json("{\"description\":\"Sleep one minute and exit\",\"name\":\"sleep_one_minute\",\"launch\":{\"computeEnvId\":\"vYOK4vn7spw7bHHWBDXZ2\",\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"s3://nextflow-ci/jordeu\",\"paramsText\":\"timeout: 60\\n\",\"pullLatest\":false,\"stubRun\":false}}")), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipeline\":{\"pipelineId\":217997727159863,\"name\":\"sleep_one_minute\",\"description\":\"Sleep one minute and exit\",\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "update", "-n", "sleep_one_minute", "-d", "Sleep one minute and exit");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesUpdated(USER_WORKSPACE_NAME, "sleep_one_minute").toString(), out.stdOut);
    }

    @Test
    void testUpdateComputeEnv(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep_one_minute\""), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipelines\":[{\"pipelineId\":217997727159863,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}],\"totalSize\":1}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/217997727159863/launch"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_update")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs").withQueryStringParameter("status", "AVAILABLE"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"isnEDBLvHDAIteOEF44ow\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":null,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/isnEDBLvHDAIteOEF44ow"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("compute_env_view")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("PUT").withPath("/pipelines/217997727159863")
                        .withBody(json("{\"name\":\"sleep_one_minute\",\"launch\":{\"computeEnvId\":\"isnEDBLvHDAIteOEF44ow\",\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"s3://nextflow-ci/jordeu\",\"paramsText\":\"timeout: 60\\n\",\"pullLatest\":false,\"stubRun\":false}}")), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipeline\":{\"pipelineId\":217997727159863,\"name\":\"sleep_one_minute\",\"description\":\"Sleep one minute and exit\",\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "update", "-n", "sleep_one_minute", "-c", "demo");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesUpdated(USER_WORKSPACE_NAME, "sleep_one_minute").toString(), out.stdOut);
    }

    @Test
    void testUpdatePipelineName(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep_one_minute\"")
        ).respond(
                response().withStatusCode(200).withBody("{\"pipelines\":[{\"pipelineId\":217997727159863,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}],\"totalSize\":1}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/217997727159863/launch")
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_update")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("PUT").withPath("/pipelines/217997727159863")
                        .withBody(json("{\"name\": \"sleepOneMinute\", \"launch\":{\"computeEnvId\":\"vYOK4vn7spw7bHHWBDXZ2\",\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"s3://nextflow-ci/jordeu\",\"paramsText\":\"timeout: 60\\n\",\"pullLatest\":false,\"stubRun\":false}}")),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withBody("{\"pipeline\":{\"pipelineId\":217997727159863,\"name\":\"sleepOneMinute\",\"description\":\"Sleep one minute and exit\",\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/validate").withQueryStringParameter("name", "sleepOneMinute")
        ).respond(
                response().withStatusCode(204)
        );

        ExecOut out = exec(mock, "pipelines", "update", "-n", "sleep_one_minute", "--new-name", "sleepOneMinute");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesUpdated(USER_WORKSPACE_NAME, "sleep_one_minute").toString(), out.stdOut);

    }

    @Test
    void testUpdatePipelineInvalidName(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep_one_minute\"")
        ).respond(
                response().withStatusCode(200).withBody("{\"pipelines\":[{\"pipelineId\":217997727159863,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}],\"totalSize\":1}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/217997727159863/launch")
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_update")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("PUT").withPath("/pipelines/217997727159863")
                        .withBody(json("{\"name\": \"sleepOneMinute\", \"launch\":{\"computeEnvId\":\"vYOK4vn7spw7bHHWBDXZ2\",\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"s3://nextflow-ci/jordeu\",\"paramsText\":\"timeout: 60\\n\",\"pullLatest\":false,\"stubRun\":false}}")),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withBody("{\"pipeline\":{\"pipelineId\":217997727159863,\"name\":\"sleepOneMinute\",\"description\":\"Sleep one minute and exit\",\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/validate").withQueryStringParameter("name", "#sleep")
        ).respond(
                response().withStatusCode(400)
                        .withBody(json("{\"message\": \"Pipeline name must contain a minimum of 2 and a maximum of 99 alphanumeric characters separated by dashes or underscores\"}"))
        );

        ExecOut out = exec(mock, "pipelines", "update", "-n", "sleep_one_minute", "--new-name", "#sleep");

        assertEquals(errorMessage(out.app, new InvalidResponseException("Pipeline name '#sleep' is not valid")), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(1, out.exitCode);
    }

    @Test
    void testAdd(MockServerClient mock) throws IOException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs").withQueryStringParameter("status", "AVAILABLE"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"vYOK4vn7spw7bHHWBDXZ2\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":true,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/vYOK4vn7spw7bHHWBDXZ2"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("compute_env_demo")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines").withBody("{\"name\":\"sleep_one_minute\",\"launch\":{\"computeEnvId\":\"vYOK4vn7spw7bHHWBDXZ2\",\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"s3://nextflow-ci/jordeu\",\"paramsText\":\"timeout: 60\\n\"}}"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipeline\":{\"pipelineId\":18388134856008,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "add", "-n", "sleep_one_minute", "--params-file", tempFile("timeout: 60\n", "params", ".yml"), "https://github.com/pditommaso/nf-sleep");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesAdded(USER_WORKSPACE_NAME, "sleep_one_minute").toString(), out.stdOut);
        assertEquals(0, out.exitCode);

    }

    @Test
    void testAddWithComputeEnv(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs").withQueryStringParameter("status", "AVAILABLE"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"vYOK4vn7spw7bHHWBDXZ2\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":null,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/vYOK4vn7spw7bHHWBDXZ2"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("compute_env_demo")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines").withBody("{\"name\":\"demo\",\"launch\":{\"computeEnvId\":\"vYOK4vn7spw7bHHWBDXZ2\",\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"s3://nextflow-ci/jordeu\"}}"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipeline\":{\"pipelineId\":18388134856008,\"name\":\"demo\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "add", "-n", "demo", "-c", "demo", "https://github.com/pditommaso/nf-sleep");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesAdded(USER_WORKSPACE_NAME, "demo").toString(), out.stdOut);
        assertEquals(0, out.exitCode);

    }

    @Test
    void testAddWithStagingScripts(MockServerClient mock) throws IOException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs").withQueryStringParameter("status", "AVAILABLE"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"vYOK4vn7spw7bHHWBDXZ2\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":true,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/vYOK4vn7spw7bHHWBDXZ2"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("compute_env_demo")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines").withBody("{\"name\":\"staging\",\"launch\":{\"computeEnvId\":\"vYOK4vn7spw7bHHWBDXZ2\",\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"s3://nextflow-ci/staging\",\"preRunScript\":\"pre_run_this\",\"postRunScript\":\"post_run_this\"}}"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipeline\":{\"pipelineId\":21697594587521,\"name\":\"staging\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":4,\"userName\":\"jordi\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "add", "-n", "staging", "--work-dir", "s3://nextflow-ci/staging", "--pre-run", tempFile("pre_run_this", "pre", "sh"), "--post-run", tempFile("post_run_this", "post", "sh"), "https://github.com/pditommaso/nf-sleep");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesAdded(USER_WORKSPACE_NAME, "staging").toString(), out.stdOut);
        assertEquals(0, out.exitCode);

    }

    @Test
    void testMissingComputeEnvironment(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs").withQueryStringParameter("status", "AVAILABLE"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[]}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "add", "-n", "sleep_one_minute", "https://github.com/pditommaso/nf-sleep");

        assertEquals(errorMessage(out.app, new NoComputeEnvironmentException(USER_WORKSPACE_NAME)), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(1, out.exitCode);

    }

    @Test
    void testDelete(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep\""), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_sleep")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("DELETE").withPath("/pipelines/183522618315672"), exactly(1)
        ).respond(
                response().withStatusCode(204)
        );

        ExecOut out = exec(mock, "pipelines", "delete", "-n", "sleep");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesDeleted("sleep", USER_WORKSPACE_NAME).toString(), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testDeleteNotFound(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep_all\""), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipelines\":[],\"totalSize\":0}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "delete", "-n", "sleep_all");

        assertEquals(errorMessage(out.app, new PipelineNotFoundException("\"sleep_all\"", USER_WORKSPACE_NAME)), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(1, out.exitCode);
    }

    @Test
    void testDeleteMultipleMatch(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"hello\""), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_multiple")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "delete", "-n", "hello");

        assertEquals(errorMessage(out.app, new MultiplePipelinesFoundException("\"hello\"", USER_WORKSPACE_NAME)), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(1, out.exitCode);
    }

    @ParameterizedTest
    @EnumSource(OutputType.class)
    void testList(OutputType format, MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_list")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/user-info"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("user")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(format, mock, "pipelines", "list");
        assertOutput(format, out, new PipelinesList(USER_WORKSPACE_NAME, List.of(
                new PipelineDbDto()
                        .pipelineId(183522618315672L)
                        .name("sleep_one_minute")
                        .repository("https://github.com/pditommaso/nf-sleep")
                        .userId(4L)
                        .userName("jordi")
        ), baseUserUrl(mock, USER_WORKSPACE_NAME), false, null));
    }

    @Test
    void testListWithOffset(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/user-info"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("user")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines")
                        .withQueryStringParameter("offset", "1")
                        .withQueryStringParameter("max", "2"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_list")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "list", "--offset", "1", "--max", "2");

        assertEquals("", out.stdErr);
        assertEquals(chop(new PipelinesList(USER_WORKSPACE_NAME, List.of(
                new PipelineDbDto()
                        .pipelineId(183522618315672L)
                        .name("sleep_one_minute")
                        .repository("https://github.com/pditommaso/nf-sleep")
                        .userId(4L)
                        .userName("jordi")
        ), baseUserUrl(mock, USER_WORKSPACE_NAME), false, PaginationInfo.from(1, 2, 1L)).toString()), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testListWithPage(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines")
                        .withQueryStringParameter("offset", "0")
                        .withQueryStringParameter("max", "2"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_list")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/user-info"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("user")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "list", "--page", "1", "--max", "2");

        assertEquals("", out.stdErr);
        assertEquals(chop(new PipelinesList(USER_WORKSPACE_NAME, List.of(
                new PipelineDbDto()
                        .pipelineId(183522618315672L)
                        .name("sleep_one_minute")
                        .repository("https://github.com/pditommaso/nf-sleep")
                        .userId(4L)
                        .userName("jordi")
        ), baseUserUrl(mock, USER_WORKSPACE_NAME), false, PaginationInfo.from(null, 2,1, 1L)).toString()), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testListWithConflictingPageable(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines")
                        .withQueryStringParameter("offset", "0")
                        .withQueryStringParameter("max", "2"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_list")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "list", "--page", "1", "--offset", "0", "--max", "2");

        assertEquals(errorMessage(out.app, new TowerException("Please use either --page or --offset as pagination parameter")), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(1, out.exitCode);
    }

    @Test
    void testListEmpty(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{ \"pipelines\": [], \"totalSize\": 0 }").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/user-info"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("user")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "list");

        assertEquals("", out.stdErr);
        assertEquals(chop(new PipelinesList(USER_WORKSPACE_NAME, List.of(), baseUserUrl(mock, USER_WORKSPACE_NAME), false, null).toString()), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testView(MockServerClient mock) throws JsonProcessingException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep_one_minute\"").withQueryStringParameter("visibility", "all"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipelines\":[{\"pipelineId\":213164477645856,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":1776,\"userName\":\"jordi10\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null,\"deleted\":false,\"lastUpdated\":\"2023-05-15T13:59:19Z\",\"optimized\":null,\"labels\":null,\"computeEnv\":null}],\"totalSize\":1}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/213164477645856").withQueryStringParameter("attributes", "labels"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipeline\":{\"pipelineId\":213164477645856,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":1776,\"userName\":\"jordi10\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null,\"deleted\":false,\"lastUpdated\":\"2023-05-15T13:59:19Z\",\"optimized\":null,\"labels\":[],\"computeEnv\":null}}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/213164477645856/launch"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"launch\":{\"id\":\"aB5VzZ5MGKnnAh6xsiKAV\",\"computeEnv\":{\"id\":\"509cXW9NmIKYTe7KbjxyZn\",\"name\":\"slurm_vallibierna\",\"description\":null,\"platform\":\"slurm-platform\",\"config\":{\"environment\":[],\"port\":null,\"hostName\":null,\"headQueue\":\"normal\",\"computeQueue\":null,\"userName\":null,\"preRunScript\":null,\"postRunScript\":null,\"launchDir\":\"$TW_AGENT_WORK\",\"workDir\":\"$TW_AGENT_WORK\",\"headJobOptions\":null,\"propagateHeadJobOptions\":null,\"maxQueueSize\":null,\"discriminator\":\"slurm-platform\"},\"dateCreated\":\"2022-12-07T09:36:03Z\",\"lastUpdated\":\"2022-12-07T09:36:03Z\",\"lastUsed\":\"2023-02-25T04:51:47Z\",\"deleted\":null,\"status\":\"AVAILABLE\",\"message\":null,\"primary\":true,\"credentialsId\":\"6hYTvH1Mvai1EqstYnIqsg\",\"workspaceId\":null,\"orgId\":null},\"pipeline\":\"https://github.com/pditommaso/nf-sleep\",\"workDir\":\"$TW_AGENT_WORK\",\"revision\":null,\"configText\":null,\"towerConfig\":null,\"paramsText\":\"timeout: 60\\n\\n\",\"preRunScript\":null,\"postRunScript\":null,\"mainScript\":null,\"entryName\":null,\"schemaName\":null,\"resume\":false,\"resumeLaunchId\":null,\"pullLatest\":false,\"stubRun\":false,\"sessionId\":null,\"runName\":null,\"configProfiles\":null,\"userSecrets\":null,\"workspaceSecrets\":null,\"optimizationId\":null,\"headJobCpus\":null,\"headJobMemoryMb\":null,\"dateCreated\":\"2023-05-15T13:59:19Z\",\"lastUpdated\":\"2023-05-15T13:59:19Z\"}}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/user-info"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("user")).withContentType(MediaType.APPLICATION_JSON)
        );


        ExecOut out = exec(mock, "pipelines", "view", "-n", "sleep_one_minute");

        assertEquals("", out.stdErr);
        assertEquals(StringUtils.chop(new PipelinesView(
                        USER_WORKSPACE_NAME,
                        new PipelineDbDto().pipelineId(213164477645856L).name("sleep_one_minute").repository("https://github.com/pditommaso/nf-sleep"),
                        new Launch()
                                .id("aB5VzZ5MGKnnAh6xsiKAV")
                                .pipeline("https://github.com/pditommaso/nf-sleep")
                                .workDir("$TW_AGENT_WORK")
                                .paramsText("timeout: 60\n\n")
                                .dateCreated(OffsetDateTime.parse("2023-05-15T13:59:19Z"))
                                .lastUpdated(OffsetDateTime.parse("2023-05-15T08:23:29Z"))
                                .resume(false)
                                .pullLatest(false)
                                .stubRun(false)
                                .computeEnv(
                                        parseJson("{\"id\": \"509cXW9NmIKYTe7KbjxyZn\"}", ComputeEnvComputeConfig.class)
                                                .name("slurm_vallibierna")
                                ),
                baseUserUrl(mock, USER_WORKSPACE_NAME)
                ).toString()), out.stdOut
        );
        assertEquals(0, out.exitCode);

    }

    @Test
    void testListFromWorkspace(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/user-info"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("user")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/user/1264/workspaces"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"orgsAndWorkspaces\":[{\"orgId\":166815615776895,\"name\":\"Seqera\",\"orgLogoUrl\":null,\"workspaceId\":null,\"workspaceName\":null},{\"orgId\":166815615776895,\"orgName\":\"Seqera\",\"orgLogoUrl\":null,\"workspaceId\":222756650686576,\"workspaceName\":\"cli\"}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("workspaceId", "222756650686576"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"pipelines\":[],\"totalSize\":0}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "list", "-w", "222756650686576");

        assertEquals("", out.stdErr);
        assertEquals(chop(new PipelinesList(buildWorkspaceRef("Seqera", "cli"), List.of(), baseWorkspaceUrl(mock, "Seqera", "cli"), false, null).toString()), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testListFromWorkspaceNotFound(MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/user-info"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("user")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/user/1264/workspaces"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"orgsAndWorkspaces\":[{\"orgId\":166815615776895,\"name\":\"Seqera\",\"orgLogoUrl\":null,\"workspaceId\":null,\"workspaceName\":null},{\"orgId\":166815615776895,\"orgName\":\"Seqera\",\"orgLogoUrl\":null,\"workspaceId\":222756650686576,\"workspaceName\":\"cli\"}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "list", "-w", "222756650686577");

        assertEquals(errorMessage(out.app, new WorkspaceNotFoundException(222756650686577L)), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(1, out.exitCode);
    }

    @Test
    void testExport(MockServerClient mock) throws JsonProcessingException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/pipelines").withQueryStringParameter("search", "\"sleep\""), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_sleep")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/183522618315672"), exactly(1)
        ).respond(
                response().withStatusCode(200).withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"pipeline\":{\"pipelineId\":183522618315672,\"name\":\"sleep_one_minute\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/pditommaso/nf-sleep\",\"userId\":1776,\"userName\":\"jordi10\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null,\"deleted\":false,\"lastUpdated\":\"2023-05-15T13:59:19Z\",\"optimized\":null,\"labels\":null,\"computeEnv\":null}}")
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/183522618315672/launch"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("pipelines_update")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "export", "-n", "sleep");

        WorkflowLaunchRequest workflowLaunchRequest = ModelHelper.createLaunchRequest(parseJson(new String(loadResource("launch"), StandardCharsets.UTF_8), Launch.class));
        PipelineDbDto pipeline = parseJson(new String(loadResource("pipelines_sleep"), StandardCharsets.UTF_8), PipelineDbDto.class);

        CreatePipelineRequest createPipelineRequest = new CreatePipelineRequest();
        createPipelineRequest.setDescription(pipeline.getDescription());
        createPipelineRequest.setIcon(pipeline.getIcon());
        createPipelineRequest.setLaunch(workflowLaunchRequest);

        String configOutput = new JSON().getContext(CreatePipelineRequest.class).writerWithDefaultPrettyPrinter().writeValueAsString(createPipelineRequest);

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesExport(configOutput, null).toString(), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testImport(MockServerClient mock) throws IOException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"isnEDBLvHDAIteOEF44ow\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":null,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/isnEDBLvHDAIteOEF44ow"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("compute_env_view")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines")
                        .withBody("{\"name\":\"pipelineNew\",\"launch\":{\"computeEnvId\":\"isnEDBLvHDAIteOEF44ow\",\"pipeline\":\"https://github.com/grananda/nextflow-hello\",\"workDir\":\"s3://nextflow-ci/julio\",\"revision\":\"main\",\"resume\":false,\"pullLatest\":false,\"stubRun\":false}}")
                        .withContentType(MediaType.APPLICATION_JSON), exactly(1)
        ).respond(
                response()
                        .withStatusCode(200)
                        .withBody(loadResource("pipelines_add_response"))
                        .withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "import", tempFile(new String(loadResource("pipelines_add"), StandardCharsets.UTF_8), "data", ".json"), "-n", "pipelineNew");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesAdded(USER_WORKSPACE_NAME, "pipelineNew").toString(), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testImportWithComputeEnv(MockServerClient mock) throws IOException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"isnEDBLvHDAIteOEF44ow\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":null,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/isnEDBLvHDAIteOEF44ow"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("compute_env_view")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines")
                        .withBody("{\"name\":\"pipelineNew\",\"launch\":{\"computeEnvId\":\"isnEDBLvHDAIteOEF44ow\",\"pipeline\":\"https://github.com/grananda/nextflow-hello\",\"workDir\":\"s3://nextflow-ci/julio\",\"revision\":\"main\",\"resume\":false,\"pullLatest\":false,\"stubRun\":false}}")
                        .withContentType(MediaType.APPLICATION_JSON), exactly(1)
        ).respond(
                response()
                        .withStatusCode(200)
                        .withBody(loadResource("pipelines_add_response"))
                        .withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "import", tempFile(new String(loadResource("pipelines_add"), StandardCharsets.UTF_8), "data", ".json"), "-n", "pipelineNew", "-c", "demo");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesAdded(USER_WORKSPACE_NAME, "pipelineNew").toString(), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testImportWithoutWorkdir(MockServerClient mock) throws IOException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"isnEDBLvHDAIteOEF44ow\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":null,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/isnEDBLvHDAIteOEF44ow"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("compute_env_view")).withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines")
                        .withBody("{\"name\":\"pipelineNew\",\"launch\":{\"computeEnvId\":\"isnEDBLvHDAIteOEF44ow\",\"pipeline\":\"https://github.com/grananda/nextflow-hello\",\"workDir\":\"s3://nextflow-ci/jordeu\",\"revision\":\"main\",\"resume\":false,\"pullLatest\":false,\"stubRun\":false}}")
                        .withContentType(MediaType.APPLICATION_JSON), exactly(1)
        ).respond(
                response()
                        .withStatusCode(200)
                        .withBody(loadResource("pipelines_add_response"))
                        .withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "import", tempFile(new String(loadResource("pipelines_add_no_workdir"), StandardCharsets.UTF_8), "data", ".json"), "-n", "pipelineNew", "-c", "demo");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesAdded(USER_WORKSPACE_NAME, "pipelineNew").toString(), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testImportWithOverwrite(MockServerClient mock) throws IOException {

        mock.reset();

        mock.when(
                request().withMethod("GET").withPath("/compute-envs"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"computeEnvs\":[{\"id\":\"isnEDBLvHDAIteOEF44ow\",\"name\":\"demo\",\"platform\":\"aws-batch\",\"status\":\"AVAILABLE\",\"message\":null,\"lastUsed\":null,\"primary\":null,\"workspaceName\":null,\"visibility\":null}]}").withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/compute-envs/isnEDBLvHDAIteOEF44ow"), exactly(1)
        ).respond(
                response()
                        .withStatusCode(200)
                        .withBody(loadResource("compute_env_view"))
                        .withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines"),
                exactly(1)
        ).respond(
                response()
                        .withStatusCode(200)
                        .withBody(loadResource("pipelines_list"))
                        .withContentType(MediaType.APPLICATION_JSON)
        );

        mock.when(
                request().withMethod("DELETE").withPath("/pipelines/183522618315672"),
                exactly(1)
        ).respond(
                response()
                        .withStatusCode(200)
        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines")
                        .withBody(JsonBody.json("{" +
                                "\"name\":\"sleep_one_minute\"," +
                                "\"launch\":{" +
                                    "\"computeEnvId\":\"isnEDBLvHDAIteOEF44ow\"," +
                                    "\"pipeline\":\"https://github.com/grananda/nextflow-hello\"," +
                                    "\"workDir\":\"s3://nextflow-ci/julio\"," +
                                    "\"revision\":\"main\"," +
                                    "\"resume\":false," +
                                    "\"pullLatest\":false," +
                                    "\"stubRun\":false" +
                                "}" +
                            "}"))
                        .withContentType(MediaType.APPLICATION_JSON), exactly(1)
        ).respond(
                response()
                        .withStatusCode(200)
                        .withBody(loadResource("pipelines_add_response"))
                        .withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "pipelines", "import", "--overwrite", tempFile(new String(loadResource("pipelines_add"), StandardCharsets.UTF_8), "data", ".json"), "-n", "sleep_one_minute");

        assertEquals("", out.stdErr);
        assertEquals(new PipelinesAdded(USER_WORKSPACE_NAME, "sleep_one_minute").toString(), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @ParameterizedTest
    @EnumSource(OutputType.class)
    void testApplyLabels(OutputType format, MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET")
                        .withPath("/pipelines")
                        .withQueryStringParameter("workspaceId", "69509535922157")
                        .withQueryStringParameter("search", "\"cli_pipeline\"")
                        .withQueryStringParameter("visibility", "all"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("""
                          {
                            "pipelines":[{
                                "pipelineId":227906339448730,
                                "name":"cli_pipeline",
                                "description":null,
                                "icon":null,
                                "repository":"https://github.com/nextflow-io/hello",
                                "userId":1,
                                "userName":"eliantor",
                                "userFirstName":null,
                                "userLastName":null,
                                "orgId":109383401867759,
                                "orgName":"CliOrg",
                                "workspaceId":69509535922157,
                                "workspaceName":"cli-wsp",
                                "visibility":"PRIVATE",
                                "deleted":false,
                                "lastUpdated":"2023-04-12T14:30:44.541301+02:00",
                                "optimized":null,
                                "labels":null,
                                "computeEnv":null
                              }],
                            "totalSize":1
                          }""")
                );

        mock.when(
                request().withMethod("GET")
                        .withPath("/pipelines/227906339448730")
                        .withQueryStringParameter("workspaceId", "69509535922157")
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("""
                          {
                            "pipeline":{
                              "pipelineId":227906339448730,
                              "name":"cli_pipeline",
                              "description":null,
                              "icon":null,
                              "repository":"https://github.com/nf-core/rnaseq",
                              "userId":1776,
                              "userName":"jordi10",
                              "userFirstName":null,
                              "userLastName":null,
                              "orgId":null,
                              "orgName":null,
                              "workspaceId":null,
                              "workspaceName":null,
                              "visibility":null,
                              "deleted":false,
                              "lastUpdated":"2023-05-15T11:53:49Z",
                              "optimized":null,
                              "labels":null,
                              "computeEnv":null
                            }
                        }""")
        );

        mock.when(
                request().withMethod("GET").withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withQueryStringParameter("max","100")
                        .withQueryStringParameter("offset","0")
                        .withQueryStringParameter("type","simple")
                        .withQueryStringParameter("search", "test_label0"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("""
                                {
                                  "labels":[
                                    {
                                      "id":20504124310835,
                                      "name":"test_label0",
                                      "value":null,
                                      "resource":false,
                                      "isDefault":false
                                    }
                                  ],
                                  "totalSize":1
                                }
                        """)
        );
        mock.when(
                request().withMethod("GET").withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withQueryStringParameter("max","100")
                        .withQueryStringParameter("offset","0")
                        .withQueryStringParameter("type","simple")
                        .withQueryStringParameter("search", "test_label1"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("""
                                {"labels":[],"totalSize":0}
                        """)
        );
        mock.when(
                request().withMethod("POST")
                        .withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"name\":\"test_label1\"}"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"id\":216786345960497,\"name\":\"test_label1\",\"value\":null,\"resource\":false,\"isDefault\":false}")
        );
        mock.when(
                request().withMethod("GET").withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withQueryStringParameter("max","100")
                        .withQueryStringParameter("offset","0")
                        .withQueryStringParameter("type","resource")
                        .withQueryStringParameter("search", "test_label2"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"labels\":[],\"totalSize\":0}")
        );
        mock.when(
                request().withMethod("POST")
                        .withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withBody("{\"name\":\"test_label2\",\"value\":\"value\",\"resource\":true}")
                        .withContentType(MediaType.APPLICATION_JSON),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withBody("{\"id\":280969213757193,\"name\":\"test_label2\",\"value\":\"value\",\"resource\":true}")
                        .withContentType(MediaType.APPLICATION_JSON)

        );
        mock.when(
                request().withMethod("POST")
                        .withPath("/pipelines/labels/apply")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withBody("{\"pipelineIds\":[227906339448730],\"labelIds\":[20504124310835,216786345960497,280969213757193]}")
                        .withContentType(MediaType.APPLICATION_JSON),
                exactly(1)
        ).respond(
                response().withStatusCode(204)
        );

        ExecOut out = exec(format, mock, "pipelines","labels","-w","69509535922157","-n","cli_pipeline", "test_label0,test_label1,test_label2=value");
        assertOutput(format,out, new ManageLabels("set","pipeline","227906339448730",69509535922157L));
    }

    @ParameterizedTest
    @EnumSource(OutputType.class)
    void testAppendLabels(OutputType format, MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET")
                        .withPath("/pipelines")
                        .withQueryStringParameter("workspaceId", "69509535922157")
                        .withQueryStringParameter("search", "\"cli_pipeline\"")
                        .withQueryStringParameter("visibility", "all"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("""
                          {
                            "pipelines":[{
                              "pipelineId":227906339448730,
                              "name":"cli_pipeline",
                              "description":null,
                              "icon":null,
                              "repository":"https://github.com/nextflow-io/hello",
                              "userId":1,
                              "userName":"eliantor",
                              "userFirstName":null,
                              "userLastName":null,
                              "orgId":109383401867759,
                              "orgName":"CliOrg",
                              "workspaceId":69509535922157,
                              "workspaceName":"cli-wsp",
                              "visibility":"PRIVATE",
                              "deleted":false,
                              "lastUpdated":"2023-04-12T14:30:44.541301+02:00",
                              "optimized":null,
                              "labels":null,
                              "computeEnv":null
                            }],
                            "totalSize":1
                        }""")
        );

        mock.when(
                request().withMethod("GET")
                        .withPath("/pipelines/227906339448730")
                        .withQueryStringParameter("workspaceId", "69509535922157")
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("""
                          {
                            "pipeline":{
                              "pipelineId":227906339448730,
                              "name":"cli_pipeline",
                              "description":null,
                              "icon":null,
                              "repository":"https://github.com/nf-core/rnaseq",
                              "userId":1776,
                              "userName":"jordi10",
                              "userFirstName":null,
                              "userLastName":null,
                              "orgId":null,
                              "orgName":null,
                              "workspaceId":null,
                              "workspaceName":null,
                              "visibility":null,
                              "deleted":false,
                              "lastUpdated":"2023-05-15T11:53:49Z",
                              "optimized":null,
                              "labels":null,
                              "computeEnv":null
                            }
                        }""")
        );

        mock.when(
                request().withMethod("GET").withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withQueryStringParameter("max","100")
                        .withQueryStringParameter("offset","0")
                        .withQueryStringParameter("type","simple")
                        .withQueryStringParameter("search", "test_label0"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("""
                          {
                            "labels":[{
                              "id":20504124310835,
                              "name":"test_label0",
                              "value":null,
                              "resource":false,
                              "isDefault":false
                            }],
                            "totalSize":1}
                        """)
        );
        mock.when(
                request().withMethod("GET").withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withQueryStringParameter("max","100")
                        .withQueryStringParameter("offset","0")
                        .withQueryStringParameter("type","resource")
                        .withQueryStringParameter("search", "test_label2"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"labels\":[],\"totalSize\":0}")
        );
        mock.when(
                request().withMethod("POST")
                        .withPath("/labels")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withBody("{\"name\":\"test_label2\",\"value\":\"value\",\"resource\":true}")
                        .withContentType(MediaType.APPLICATION_JSON),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withBody("{\"id\":280969213757193,\"name\":\"test_label2\",\"value\":\"value\",\"resource\":true}")
                        .withContentType(MediaType.APPLICATION_JSON)

        );

        mock.when(
                request().withMethod("POST").withPath("/pipelines/labels/add")
                        .withQueryStringParameter("workspaceId","69509535922157")
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"pipelineIds\":[227906339448730],\"labelIds\":[20504124310835,280969213757193]}")
        ).respond(
                response().withStatusCode(204)
        );


        ExecOut out = exec(format,mock,"pipelines", "labels", "-w", "69509535922157", "-n", "cli_pipeline", "-o", "append","test_label0,test_label2=value");
        assertOutput(format,out, new ManageLabels("append","pipeline","227906339448730",69509535922157L));
    }

    @ParameterizedTest
    @EnumSource(OutputType.class)
    void testRemoveLabels(OutputType format, MockServerClient mock) {

        mock.reset();

        mock.when(
                request().withMethod("GET")
                        .withPath("/pipelines")
                        .withQueryStringParameter("search", "\"lab1\"")
                        .withQueryStringParameter("visibility", "all"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"pipelines\":[{\"pipelineId\":8858801873955,\"name\":\"lab1\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/nf-core/rnaseq\",\"userId\":1776,\"userName\":\"jordi10\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null,\"deleted\":false,\"lastUpdated\":\"2023-05-15T11:53:49Z\",\"optimized\":null,\"labels\":null,\"computeEnv\":null}],\"totalSize\":1}")
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/8858801873955"), exactly(1)
        ).respond(
                response().withStatusCode(200).withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"pipeline\":{\"pipelineId\":8858801873955,\"name\":\"lab1\",\"description\":null,\"icon\":null,\"repository\":\"https://github.com/nf-core/rnaseq\",\"userId\":1776,\"userName\":\"jordi10\",\"userFirstName\":null,\"userLastName\":null,\"orgId\":null,\"orgName\":null,\"workspaceId\":null,\"workspaceName\":null,\"visibility\":null,\"deleted\":false,\"lastUpdated\":\"2023-05-15T11:53:49Z\",\"optimized\":null,\"labels\":null,\"computeEnv\":null}}")
        );

        mock.when(
                request().withMethod("GET").withPath("/labels")
                        .withQueryStringParameter("max","100")
                        .withQueryStringParameter("offset","0")
                        .withQueryStringParameter("type","simple")
                        .withQueryStringParameter("search", "l1"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"labels\":[{\"id\":144980212454879,\"name\":\"l1\",\"value\":null,\"resource\":false,\"isDefault\":false},{\"id\":97601600405522,\"name\":\"label1\",\"value\":null,\"resource\":false,\"isDefault\":false}],\"totalSize\":2}")
        );

        mock.when(
                request().withMethod("GET").withPath("/labels")
                        .withQueryStringParameter("max","100")
                        .withQueryStringParameter("offset","0")
                        .withQueryStringParameter("type","simple")
                        .withQueryStringParameter("search", "l2"),
                exactly(1)
        ).respond(
                response().withStatusCode(200)
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"labels\":[{\"id\":35112846698158,\"name\":\"l2\",\"value\":null,\"resource\":false,\"isDefault\":false},{\"id\":100122323452095,\"name\":\"label2\",\"value\":null,\"resource\":false,\"isDefault\":false}],\"totalSize\":2}")
        );
        mock.when(
                request().withMethod("POST")
                        .withPath("/pipelines/labels/remove")
                        .withContentType(MediaType.APPLICATION_JSON)
                        .withBody("{\"pipelineIds\":[8858801873955],\"labelIds\":[144980212454879,35112846698158]}")
        ).respond(
                response().withStatusCode(204)
        );

        ExecOut out = exec(format,mock, "pipelines", "labels","-n","lab1","-o","delete", "l1,l2");
        assertOutput(format,out, new ManageLabels("delete","pipeline","8858801873955",null));
    }
}
