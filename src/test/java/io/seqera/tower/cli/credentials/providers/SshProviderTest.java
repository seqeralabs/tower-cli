/*
 * Copyright (c) 2021, Seqera Labs.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This Source Code Form is "Incompatible With Secondary Licenses", as
 * defined by the Mozilla Public License, v. 2.0.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.seqera.tower.cli.credentials.providers;

import io.seqera.tower.ApiException;
import io.seqera.tower.cli.BaseCmdTest;
import io.seqera.tower.cli.commands.enums.OutputType;
import io.seqera.tower.cli.responses.CredentialsAdded;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import org.mockserver.client.MockServerClient;
import org.mockserver.model.MediaType;

import java.io.IOException;

import static io.seqera.tower.cli.commands.AbstractApiCmd.USER_WORKSPACE_NAME;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockserver.matchers.Times.exactly;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

class SshProviderTest extends BaseCmdTest {

    @ParameterizedTest
    @EnumSource(OutputType.class)
    void testAdd(OutputType format, MockServerClient mock) throws IOException {

        mock.when(
                request().withMethod("POST").withPath("/credentials").withBody("{\"credentials\":{\"keys\":{\"privateKey\":\"privat_key\",\"passphrase\":\"my_secret\"},\"name\":\"ssh\",\"provider\":\"ssh\"}}"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"credentialsId\":\"1cz5A8cuBkB5iJliCwJCFU\"}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(format, mock, "credentials", "add", "ssh", "-n", "ssh", "-k", tempFile("privat_key", "id_rsa", ""), "-p", "my_secret");
        assertOutput(format, out, new CredentialsAdded("SSH", "1cz5A8cuBkB5iJliCwJCFU", "ssh", USER_WORKSPACE_NAME));
    }

    @Test
    void testInvalidPrivateKey(MockServerClient mock) throws IOException {

        mock.when(
                request().withMethod("POST").withPath("/credentials").withBody("{\"credentials\":{\"keys\":{\"privateKey\":\"invalid_private_key\",\"passphrase\":\"my_secret\"},\"name\":\"ssh\",\"provider\":\"ssh\"}}"), exactly(1)
        ).respond(
                response().withStatusCode(400).withBody("{\"message\":\"Unrecognised SSH private key type\"}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "credentials", "add", "ssh", "-n", "ssh", "-k", tempFile("invalid_private_key", "id_rsa", ""), "-p", "my_secret");

        assertEquals(errorMessage(out.app, new ApiException(400, "", null, "{\"message\":\"Unrecognised SSH private key type\"}")), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(1, out.exitCode);

    }

}
